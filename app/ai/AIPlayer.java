package ai;

import structures.GameState;
import structures.basic.Board;
import structures.basic.Card;
import structures.basic.Player;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.fasterxml.jackson.databind.JsonNode;

import akka.actor.ActorRef;
import commands.BasicCommands;
import events.EventProcessor;

/**
 * AIPlayer implements an AI which can analyse the positions on the board, calculate different actions,
 * and execute the actions one by one over the board. The actions it can perform includes moving a unit from one tile to another,
 * selecting a unit and then using it to attack an enemy unit, cast a card from its hand, etc.
 */
public class AIPlayer{
    /**
     * This is the reference of the whole board
     */
    private Board board;
    /**
     * This collection contains all the action that the AI could perform
     */
    private ArrayList<Action> actions ;
    /**
     * This collection contains all the card that AI could play
     */
    private ArrayList<Card> hand ;
    
    /**
     * The actor reference
     */
    private ActorRef out;
    
    /**
     * The game state
     */
    private GameState gameState;

    /**
     * The player of AI
     */
    private Player playerAI;
    
    
    /**
     * AI will need a reference to board to analyse its position and a list of cards which it will use to play the game.
     * @param board reference to a board instance
     * @param deck the list of cards it will use to play the game
     */
    public AIPlayer(Board board, ArrayList<Card> deck) {
        this.board = board;
        this.hand = deck;
    }

    /**
     * This function is for AI to execute asynchronously
     */
    public void update() {
        searchAction();
        //performAction();
    }

    /**
     * The search action method will analyze the AI's position on the board and then find appropriate actions it should perform.
     * The actions it can perform will be stored in the class variable 'actions'.
     */
    private void searchAction() {
        //Create a list of actions to be performed
    }

    /**
     * The perform action method will execute the action generated by search action method.
     * The list of action will be cleared after executing all the actions to prepare for next turn.
     */
    private void performAction(ActionType actionType) {
        //Execute actions and then clear the list
        Action action = new Action(actionType, out, gameState);
        Thread act = new Thread(action);
        act.start();
        //Begin to execute
        try {
			act.join();
		} catch (InterruptedException e) {
			// Print the exception message
			e.printStackTrace();
		}
    }

	public void processEvent(ActorRef out, GameState gameState,ActionType actionType) {
	 
		this.out=out;
		this.gameState=gameState;
		
		//initialize the board and action type
		this.board=gameState.board;
		//this.hand = gameState.board.cards;
		
		//search the board
	
		//begin to execute
		 performAction(actionType);
	}
}
